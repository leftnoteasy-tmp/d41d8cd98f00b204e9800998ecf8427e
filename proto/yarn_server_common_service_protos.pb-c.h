/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_yarn_5fserver_5fcommon_5fservice_5fprotos_2eproto__INCLUDED
#define PROTOBUF_C_yarn_5fserver_5fcommon_5fservice_5fprotos_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "yarn_protos.pb-c.h"
#include "yarn_server_common_protos.pb-c.h"

typedef struct _RegisterNodeManagerRequestProto RegisterNodeManagerRequestProto;
typedef struct _RegisterNodeManagerResponseProto RegisterNodeManagerResponseProto;
typedef struct _NodeHeartbeatRequestProto NodeHeartbeatRequestProto;
typedef struct _NodeHeartbeatResponseProto NodeHeartbeatResponseProto;


/* --- enums --- */


/* --- messages --- */

struct  _RegisterNodeManagerRequestProto
{
  ProtobufCMessage base;
  NodeIdProto *node_id;
  protobuf_c_boolean has_http_port;
  int32_t http_port;
  ResourceProto *resource;
};
#define REGISTER_NODE_MANAGER_REQUEST_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_node_manager_request_proto__descriptor) \
    , NULL, 0,0, NULL }


struct  _RegisterNodeManagerResponseProto
{
  ProtobufCMessage base;
  MasterKeyProto *container_token_master_key;
  MasterKeyProto *nm_token_master_key;
  protobuf_c_boolean has_nodeaction;
  NodeActionProto nodeaction;
  protobuf_c_boolean has_rm_identifier;
  int64_t rm_identifier;
  char *diagnostics_message;
};
#define REGISTER_NODE_MANAGER_RESPONSE_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_node_manager_response_proto__descriptor) \
    , NULL, NULL, 0,0, 0,0, NULL }


struct  _NodeHeartbeatRequestProto
{
  ProtobufCMessage base;
  NodeStatusProto *node_status;
  MasterKeyProto *last_known_container_token_master_key;
  MasterKeyProto *last_known_nm_token_master_key;
};
#define NODE_HEARTBEAT_REQUEST_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node_heartbeat_request_proto__descriptor) \
    , NULL, NULL, NULL }


struct  _NodeHeartbeatResponseProto
{
  ProtobufCMessage base;
  protobuf_c_boolean has_response_id;
  int32_t response_id;
  MasterKeyProto *container_token_master_key;
  MasterKeyProto *nm_token_master_key;
  protobuf_c_boolean has_nodeaction;
  NodeActionProto nodeaction;
  size_t n_containers_to_cleanup;
  ContainerIdProto **containers_to_cleanup;
  size_t n_applications_to_cleanup;
  ApplicationIdProto **applications_to_cleanup;
  protobuf_c_boolean has_nextheartbeatinterval;
  int64_t nextheartbeatinterval;
  char *diagnostics_message;
};
#define NODE_HEARTBEAT_RESPONSE_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node_heartbeat_response_proto__descriptor) \
    , 0,0, NULL, NULL, 0,0, 0,NULL, 0,NULL, 0,0, NULL }


/* RegisterNodeManagerRequestProto methods */
void   register_node_manager_request_proto__init
                     (RegisterNodeManagerRequestProto         *message);
size_t register_node_manager_request_proto__get_packed_size
                     (const RegisterNodeManagerRequestProto   *message);
size_t register_node_manager_request_proto__pack
                     (const RegisterNodeManagerRequestProto   *message,
                      uint8_t             *out);
size_t register_node_manager_request_proto__pack_to_buffer
                     (const RegisterNodeManagerRequestProto   *message,
                      ProtobufCBuffer     *buffer);
RegisterNodeManagerRequestProto *
       register_node_manager_request_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   register_node_manager_request_proto__free_unpacked
                     (RegisterNodeManagerRequestProto *message,
                      ProtobufCAllocator *allocator);
/* RegisterNodeManagerResponseProto methods */
void   register_node_manager_response_proto__init
                     (RegisterNodeManagerResponseProto         *message);
size_t register_node_manager_response_proto__get_packed_size
                     (const RegisterNodeManagerResponseProto   *message);
size_t register_node_manager_response_proto__pack
                     (const RegisterNodeManagerResponseProto   *message,
                      uint8_t             *out);
size_t register_node_manager_response_proto__pack_to_buffer
                     (const RegisterNodeManagerResponseProto   *message,
                      ProtobufCBuffer     *buffer);
RegisterNodeManagerResponseProto *
       register_node_manager_response_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   register_node_manager_response_proto__free_unpacked
                     (RegisterNodeManagerResponseProto *message,
                      ProtobufCAllocator *allocator);
/* NodeHeartbeatRequestProto methods */
void   node_heartbeat_request_proto__init
                     (NodeHeartbeatRequestProto         *message);
size_t node_heartbeat_request_proto__get_packed_size
                     (const NodeHeartbeatRequestProto   *message);
size_t node_heartbeat_request_proto__pack
                     (const NodeHeartbeatRequestProto   *message,
                      uint8_t             *out);
size_t node_heartbeat_request_proto__pack_to_buffer
                     (const NodeHeartbeatRequestProto   *message,
                      ProtobufCBuffer     *buffer);
NodeHeartbeatRequestProto *
       node_heartbeat_request_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node_heartbeat_request_proto__free_unpacked
                     (NodeHeartbeatRequestProto *message,
                      ProtobufCAllocator *allocator);
/* NodeHeartbeatResponseProto methods */
void   node_heartbeat_response_proto__init
                     (NodeHeartbeatResponseProto         *message);
size_t node_heartbeat_response_proto__get_packed_size
                     (const NodeHeartbeatResponseProto   *message);
size_t node_heartbeat_response_proto__pack
                     (const NodeHeartbeatResponseProto   *message,
                      uint8_t             *out);
size_t node_heartbeat_response_proto__pack_to_buffer
                     (const NodeHeartbeatResponseProto   *message,
                      ProtobufCBuffer     *buffer);
NodeHeartbeatResponseProto *
       node_heartbeat_response_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node_heartbeat_response_proto__free_unpacked
                     (NodeHeartbeatResponseProto *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RegisterNodeManagerRequestProto_Closure)
                 (const RegisterNodeManagerRequestProto *message,
                  void *closure_data);
typedef void (*RegisterNodeManagerResponseProto_Closure)
                 (const RegisterNodeManagerResponseProto *message,
                  void *closure_data);
typedef void (*NodeHeartbeatRequestProto_Closure)
                 (const NodeHeartbeatRequestProto *message,
                  void *closure_data);
typedef void (*NodeHeartbeatResponseProto_Closure)
                 (const NodeHeartbeatResponseProto *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor register_node_manager_request_proto__descriptor;
extern const ProtobufCMessageDescriptor register_node_manager_response_proto__descriptor;
extern const ProtobufCMessageDescriptor node_heartbeat_request_proto__descriptor;
extern const ProtobufCMessageDescriptor node_heartbeat_response_proto__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_yarn_5fserver_5fcommon_5fservice_5fprotos_2eproto__INCLUDED */

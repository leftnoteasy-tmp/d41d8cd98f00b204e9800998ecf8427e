/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_yarn_5fprotos_2eproto__INCLUDED
#define PROTOBUF_C_yarn_5fprotos_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "Security.pb-c.h"

typedef struct _SerializedExceptionProto SerializedExceptionProto;
typedef struct _ApplicationIdProto ApplicationIdProto;
typedef struct _ApplicationAttemptIdProto ApplicationAttemptIdProto;
typedef struct _ContainerIdProto ContainerIdProto;
typedef struct _ResourceProto ResourceProto;
typedef struct _PriorityProto PriorityProto;
typedef struct _ContainerProto ContainerProto;
typedef struct _URLProto URLProto;
typedef struct _LocalResourceProto LocalResourceProto;
typedef struct _ApplicationResourceUsageReportProto ApplicationResourceUsageReportProto;
typedef struct _ApplicationReportProto ApplicationReportProto;
typedef struct _NodeIdProto NodeIdProto;
typedef struct _NodeReportProto NodeReportProto;
typedef struct _ResourceRequestProto ResourceRequestProto;
typedef struct _PreemptionMessageProto PreemptionMessageProto;
typedef struct _StrictPreemptionContractProto StrictPreemptionContractProto;
typedef struct _PreemptionContractProto PreemptionContractProto;
typedef struct _PreemptionContainerProto PreemptionContainerProto;
typedef struct _PreemptionResourceRequestProto PreemptionResourceRequestProto;
typedef struct _ResourceBlacklistRequestProto ResourceBlacklistRequestProto;
typedef struct _ApplicationSubmissionContextProto ApplicationSubmissionContextProto;
typedef struct _ApplicationACLMapProto ApplicationACLMapProto;
typedef struct _YarnClusterMetricsProto YarnClusterMetricsProto;
typedef struct _QueueInfoProto QueueInfoProto;
typedef struct _QueueUserACLInfoProto QueueUserACLInfoProto;
typedef struct _ContainerLaunchContextProto ContainerLaunchContextProto;
typedef struct _ContainerStatusProto ContainerStatusProto;
typedef struct _StringLocalResourceMapProto StringLocalResourceMapProto;
typedef struct _StringStringMapProto StringStringMapProto;
typedef struct _StringBytesMapProto StringBytesMapProto;


/* --- enums --- */

typedef enum _ContainerStateProto {
  CONTAINER_STATE_PROTO__C_NEW = 1,
  CONTAINER_STATE_PROTO__C_RUNNING = 2,
  CONTAINER_STATE_PROTO__C_COMPLETE = 3
} ContainerStateProto;
typedef enum _YarnApplicationStateProto {
  YARN_APPLICATION_STATE_PROTO__NEW = 1,
  YARN_APPLICATION_STATE_PROTO__NEW_SAVING = 2,
  YARN_APPLICATION_STATE_PROTO__SUBMITTED = 3,
  YARN_APPLICATION_STATE_PROTO__ACCEPTED = 4,
  YARN_APPLICATION_STATE_PROTO__RUNNING = 5,
  YARN_APPLICATION_STATE_PROTO__FINISHED = 6,
  YARN_APPLICATION_STATE_PROTO__FAILED = 7,
  YARN_APPLICATION_STATE_PROTO__KILLED = 8
} YarnApplicationStateProto;
typedef enum _FinalApplicationStatusProto {
  FINAL_APPLICATION_STATUS_PROTO__APP_UNDEFINED = 0,
  FINAL_APPLICATION_STATUS_PROTO__APP_SUCCEEDED = 1,
  FINAL_APPLICATION_STATUS_PROTO__APP_FAILED = 2,
  FINAL_APPLICATION_STATUS_PROTO__APP_KILLED = 3
} FinalApplicationStatusProto;
typedef enum _LocalResourceVisibilityProto {
  LOCAL_RESOURCE_VISIBILITY_PROTO__PUBLIC = 1,
  LOCAL_RESOURCE_VISIBILITY_PROTO__PRIVATE = 2,
  LOCAL_RESOURCE_VISIBILITY_PROTO__APPLICATION = 3
} LocalResourceVisibilityProto;
typedef enum _LocalResourceTypeProto {
  LOCAL_RESOURCE_TYPE_PROTO__ARCHIVE = 1,
  LOCAL_RESOURCE_TYPE_PROTO__FILE = 2,
  LOCAL_RESOURCE_TYPE_PROTO__PATTERN = 3
} LocalResourceTypeProto;
typedef enum _NodeStateProto {
  NODE_STATE_PROTO__NS_NEW = 1,
  NODE_STATE_PROTO__NS_RUNNING = 2,
  NODE_STATE_PROTO__NS_UNHEALTHY = 3,
  NODE_STATE_PROTO__NS_DECOMMISSIONED = 4,
  NODE_STATE_PROTO__NS_LOST = 5,
  NODE_STATE_PROTO__NS_REBOOTED = 6
} NodeStateProto;
typedef enum _AMCommandProto {
  AMCOMMAND_PROTO__AM_RESYNC = 1,
  AMCOMMAND_PROTO__AM_SHUTDOWN = 2
} AMCommandProto;
typedef enum _ApplicationAccessTypeProto {
  APPLICATION_ACCESS_TYPE_PROTO__APPACCESS_VIEW_APP = 1,
  APPLICATION_ACCESS_TYPE_PROTO__APPACCESS_MODIFY_APP = 2
} ApplicationAccessTypeProto;
typedef enum _QueueStateProto {
  QUEUE_STATE_PROTO__Q_STOPPED = 1,
  QUEUE_STATE_PROTO__Q_RUNNING = 2
} QueueStateProto;
typedef enum _QueueACLProto {
  QUEUE_ACLPROTO__QACL_SUBMIT_APPLICATIONS = 1,
  QUEUE_ACLPROTO__QACL_ADMINISTER_QUEUE = 2
} QueueACLProto;
typedef enum _ContainerExitStatusProto {
  CONTAINER_EXIT_STATUS_PROTO__SUCCESS = 0,
  CONTAINER_EXIT_STATUS_PROTO__INVALID = -1000,
  CONTAINER_EXIT_STATUS_PROTO__ABORTED = -100,
  CONTAINER_EXIT_STATUS_PROTO__DISKS_FAILED = -101
} ContainerExitStatusProto;

/* --- messages --- */

struct  _SerializedExceptionProto
{
  ProtobufCMessage base;
  char *message;
  char *trace;
  char *class_name;
  SerializedExceptionProto *cause;
};
#define SERIALIZED_EXCEPTION_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&serialized_exception_proto__descriptor) \
    , NULL, NULL, NULL, NULL }


struct  _ApplicationIdProto
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  int32_t id;
  protobuf_c_boolean has_cluster_timestamp;
  int64_t cluster_timestamp;
};
#define APPLICATION_ID_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&application_id_proto__descriptor) \
    , 0,0, 0,0 }


struct  _ApplicationAttemptIdProto
{
  ProtobufCMessage base;
  ApplicationIdProto *application_id;
  protobuf_c_boolean has_attemptid;
  int32_t attemptid;
};
#define APPLICATION_ATTEMPT_ID_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&application_attempt_id_proto__descriptor) \
    , NULL, 0,0 }


struct  _ContainerIdProto
{
  ProtobufCMessage base;
  ApplicationIdProto *app_id;
  ApplicationAttemptIdProto *app_attempt_id;
  protobuf_c_boolean has_id;
  int32_t id;
};
#define CONTAINER_ID_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&container_id_proto__descriptor) \
    , NULL, NULL, 0,0 }


struct  _ResourceProto
{
  ProtobufCMessage base;
  protobuf_c_boolean has_memory;
  int32_t memory;
  protobuf_c_boolean has_virtual_cores;
  int32_t virtual_cores;
};
#define RESOURCE_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resource_proto__descriptor) \
    , 0,0, 0,0 }


struct  _PriorityProto
{
  ProtobufCMessage base;
  protobuf_c_boolean has_priority;
  int32_t priority;
};
#define PRIORITY_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&priority_proto__descriptor) \
    , 0,0 }


struct  _ContainerProto
{
  ProtobufCMessage base;
  ContainerIdProto *id;
  NodeIdProto *nodeid;
  char *node_http_address;
  ResourceProto *resource;
  PriorityProto *priority;
  Hadoop__Common__TokenProto *container_token;
};
#define CONTAINER_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&container_proto__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  _URLProto
{
  ProtobufCMessage base;
  char *scheme;
  char *host;
  protobuf_c_boolean has_port;
  int32_t port;
  char *file;
};
#define URLPROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&urlproto__descriptor) \
    , NULL, NULL, 0,0, NULL }


struct  _LocalResourceProto
{
  ProtobufCMessage base;
  URLProto *resource;
  protobuf_c_boolean has_size;
  int64_t size;
  protobuf_c_boolean has_timestamp;
  int64_t timestamp;
  protobuf_c_boolean has_type;
  LocalResourceTypeProto type;
  protobuf_c_boolean has_visibility;
  LocalResourceVisibilityProto visibility;
  char *pattern;
};
#define LOCAL_RESOURCE_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&local_resource_proto__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _ApplicationResourceUsageReportProto
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num_used_containers;
  int32_t num_used_containers;
  protobuf_c_boolean has_num_reserved_containers;
  int32_t num_reserved_containers;
  ResourceProto *used_resources;
  ResourceProto *reserved_resources;
  ResourceProto *needed_resources;
};
#define APPLICATION_RESOURCE_USAGE_REPORT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&application_resource_usage_report_proto__descriptor) \
    , 0,0, 0,0, NULL, NULL, NULL }


struct  _ApplicationReportProto
{
  ProtobufCMessage base;
  ApplicationIdProto *applicationid;
  char *user;
  char *queue;
  char *name;
  char *host;
  protobuf_c_boolean has_rpc_port;
  int32_t rpc_port;
  Hadoop__Common__TokenProto *client_to_am_token;
  protobuf_c_boolean has_yarn_application_state;
  YarnApplicationStateProto yarn_application_state;
  char *trackingurl;
  char *diagnostics;
  protobuf_c_boolean has_starttime;
  int64_t starttime;
  protobuf_c_boolean has_finishtime;
  int64_t finishtime;
  protobuf_c_boolean has_final_application_status;
  FinalApplicationStatusProto final_application_status;
  ApplicationResourceUsageReportProto *app_resource_usage;
  char *originaltrackingurl;
  ApplicationAttemptIdProto *currentapplicationattemptid;
  protobuf_c_boolean has_progress;
  float progress;
  char *applicationtype;
  Hadoop__Common__TokenProto *am_rm_token;
};
extern char application_report_proto__diagnostics__default_value[];
#define APPLICATION_REPORT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&application_report_proto__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,0, NULL, 0,0, NULL, application_report_proto__diagnostics__default_value, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, NULL, NULL }


struct  _NodeIdProto
{
  ProtobufCMessage base;
  char *host;
  protobuf_c_boolean has_port;
  int32_t port;
};
#define NODE_ID_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node_id_proto__descriptor) \
    , NULL, 0,0 }


struct  _NodeReportProto
{
  ProtobufCMessage base;
  NodeIdProto *nodeid;
  char *httpaddress;
  char *rackname;
  ResourceProto *used;
  ResourceProto *capability;
  protobuf_c_boolean has_numcontainers;
  int32_t numcontainers;
  protobuf_c_boolean has_node_state;
  NodeStateProto node_state;
  char *health_report;
  protobuf_c_boolean has_last_health_report_time;
  int64_t last_health_report_time;
};
#define NODE_REPORT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node_report_proto__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, NULL, 0,0 }


struct  _ResourceRequestProto
{
  ProtobufCMessage base;
  PriorityProto *priority;
  char *resource_name;
  ResourceProto *capability;
  protobuf_c_boolean has_num_containers;
  int32_t num_containers;
  protobuf_c_boolean has_relax_locality;
  protobuf_c_boolean relax_locality;
};
#define RESOURCE_REQUEST_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resource_request_proto__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,1 }


struct  _PreemptionMessageProto
{
  ProtobufCMessage base;
  StrictPreemptionContractProto *strictcontract;
  PreemptionContractProto *contract;
};
#define PREEMPTION_MESSAGE_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&preemption_message_proto__descriptor) \
    , NULL, NULL }


struct  _StrictPreemptionContractProto
{
  ProtobufCMessage base;
  size_t n_container;
  PreemptionContainerProto **container;
};
#define STRICT_PREEMPTION_CONTRACT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&strict_preemption_contract_proto__descriptor) \
    , 0,NULL }


struct  _PreemptionContractProto
{
  ProtobufCMessage base;
  size_t n_resource;
  PreemptionResourceRequestProto **resource;
  size_t n_container;
  PreemptionContainerProto **container;
};
#define PREEMPTION_CONTRACT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&preemption_contract_proto__descriptor) \
    , 0,NULL, 0,NULL }


struct  _PreemptionContainerProto
{
  ProtobufCMessage base;
  ContainerIdProto *id;
};
#define PREEMPTION_CONTAINER_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&preemption_container_proto__descriptor) \
    , NULL }


struct  _PreemptionResourceRequestProto
{
  ProtobufCMessage base;
  ResourceRequestProto *resource;
};
#define PREEMPTION_RESOURCE_REQUEST_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&preemption_resource_request_proto__descriptor) \
    , NULL }


struct  _ResourceBlacklistRequestProto
{
  ProtobufCMessage base;
  size_t n_blacklist_additions;
  char **blacklist_additions;
  size_t n_blacklist_removals;
  char **blacklist_removals;
};
#define RESOURCE_BLACKLIST_REQUEST_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resource_blacklist_request_proto__descriptor) \
    , 0,NULL, 0,NULL }


struct  _ApplicationSubmissionContextProto
{
  ProtobufCMessage base;
  ApplicationIdProto *application_id;
  char *application_name;
  char *queue;
  PriorityProto *priority;
  ContainerLaunchContextProto *am_container_spec;
  protobuf_c_boolean has_cancel_tokens_when_complete;
  protobuf_c_boolean cancel_tokens_when_complete;
  protobuf_c_boolean has_unmanaged_am;
  protobuf_c_boolean unmanaged_am;
  protobuf_c_boolean has_maxappattempts;
  int32_t maxappattempts;
  ResourceProto *resource;
  char *applicationtype;
};
extern char application_submission_context_proto__application_name__default_value[];
extern char application_submission_context_proto__queue__default_value[];
extern char application_submission_context_proto__application_type__default_value[];
#define APPLICATION_SUBMISSION_CONTEXT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&application_submission_context_proto__descriptor) \
    , NULL, application_submission_context_proto__application_name__default_value, application_submission_context_proto__queue__default_value, NULL, NULL, 0,1, 0,0, 0,0, NULL, application_submission_context_proto__application_type__default_value }


struct  _ApplicationACLMapProto
{
  ProtobufCMessage base;
  protobuf_c_boolean has_accesstype;
  ApplicationAccessTypeProto accesstype;
  char *acl;
};
extern char application_aclmap_proto__acl__default_value[];
#define APPLICATION_ACLMAP_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&application_aclmap_proto__descriptor) \
    , 0,0, application_aclmap_proto__acl__default_value }


struct  _YarnClusterMetricsProto
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num_node_managers;
  int32_t num_node_managers;
};
#define YARN_CLUSTER_METRICS_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&yarn_cluster_metrics_proto__descriptor) \
    , 0,0 }


struct  _QueueInfoProto
{
  ProtobufCMessage base;
  char *queuename;
  protobuf_c_boolean has_capacity;
  float capacity;
  protobuf_c_boolean has_maximumcapacity;
  float maximumcapacity;
  protobuf_c_boolean has_currentcapacity;
  float currentcapacity;
  protobuf_c_boolean has_state;
  QueueStateProto state;
  size_t n_childqueues;
  QueueInfoProto **childqueues;
  size_t n_applications;
  ApplicationReportProto **applications;
};
#define QUEUE_INFO_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&queue_info_proto__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL }


struct  _QueueUserACLInfoProto
{
  ProtobufCMessage base;
  char *queuename;
  size_t n_useracls;
  QueueACLProto *useracls;
};
#define QUEUE_USER_ACLINFO_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&queue_user_aclinfo_proto__descriptor) \
    , NULL, 0,NULL }


struct  _ContainerLaunchContextProto
{
  ProtobufCMessage base;
  size_t n_localresources;
  StringLocalResourceMapProto **localresources;
  protobuf_c_boolean has_tokens;
  ProtobufCBinaryData tokens;
  size_t n_service_data;
  StringBytesMapProto **service_data;
  size_t n_environment;
  StringStringMapProto **environment;
  size_t n_command;
  char **command;
  size_t n_application_acls;
  ApplicationACLMapProto **application_acls;
};
#define CONTAINER_LAUNCH_CONTEXT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&container_launch_context_proto__descriptor) \
    , 0,NULL, 0,{0,NULL}, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _ContainerStatusProto
{
  ProtobufCMessage base;
  ContainerIdProto *container_id;
  protobuf_c_boolean has_state;
  ContainerStateProto state;
  char *diagnostics;
  protobuf_c_boolean has_exit_status;
  int32_t exit_status;
};
extern char container_status_proto__diagnostics__default_value[];
#define CONTAINER_STATUS_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&container_status_proto__descriptor) \
    , NULL, 0,0, container_status_proto__diagnostics__default_value, 0,-1000 }


struct  _StringLocalResourceMapProto
{
  ProtobufCMessage base;
  char *key;
  LocalResourceProto *value;
};
#define STRING_LOCAL_RESOURCE_MAP_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&string_local_resource_map_proto__descriptor) \
    , NULL, NULL }


struct  _StringStringMapProto
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define STRING_STRING_MAP_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&string_string_map_proto__descriptor) \
    , NULL, NULL }


struct  _StringBytesMapProto
{
  ProtobufCMessage base;
  char *key;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
};
#define STRING_BYTES_MAP_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&string_bytes_map_proto__descriptor) \
    , NULL, 0,{0,NULL} }


/* SerializedExceptionProto methods */
void   serialized_exception_proto__init
                     (SerializedExceptionProto         *message);
size_t serialized_exception_proto__get_packed_size
                     (const SerializedExceptionProto   *message);
size_t serialized_exception_proto__pack
                     (const SerializedExceptionProto   *message,
                      uint8_t             *out);
size_t serialized_exception_proto__pack_to_buffer
                     (const SerializedExceptionProto   *message,
                      ProtobufCBuffer     *buffer);
SerializedExceptionProto *
       serialized_exception_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   serialized_exception_proto__free_unpacked
                     (SerializedExceptionProto *message,
                      ProtobufCAllocator *allocator);
/* ApplicationIdProto methods */
void   application_id_proto__init
                     (ApplicationIdProto         *message);
size_t application_id_proto__get_packed_size
                     (const ApplicationIdProto   *message);
size_t application_id_proto__pack
                     (const ApplicationIdProto   *message,
                      uint8_t             *out);
size_t application_id_proto__pack_to_buffer
                     (const ApplicationIdProto   *message,
                      ProtobufCBuffer     *buffer);
ApplicationIdProto *
       application_id_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   application_id_proto__free_unpacked
                     (ApplicationIdProto *message,
                      ProtobufCAllocator *allocator);
/* ApplicationAttemptIdProto methods */
void   application_attempt_id_proto__init
                     (ApplicationAttemptIdProto         *message);
size_t application_attempt_id_proto__get_packed_size
                     (const ApplicationAttemptIdProto   *message);
size_t application_attempt_id_proto__pack
                     (const ApplicationAttemptIdProto   *message,
                      uint8_t             *out);
size_t application_attempt_id_proto__pack_to_buffer
                     (const ApplicationAttemptIdProto   *message,
                      ProtobufCBuffer     *buffer);
ApplicationAttemptIdProto *
       application_attempt_id_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   application_attempt_id_proto__free_unpacked
                     (ApplicationAttemptIdProto *message,
                      ProtobufCAllocator *allocator);
/* ContainerIdProto methods */
void   container_id_proto__init
                     (ContainerIdProto         *message);
size_t container_id_proto__get_packed_size
                     (const ContainerIdProto   *message);
size_t container_id_proto__pack
                     (const ContainerIdProto   *message,
                      uint8_t             *out);
size_t container_id_proto__pack_to_buffer
                     (const ContainerIdProto   *message,
                      ProtobufCBuffer     *buffer);
ContainerIdProto *
       container_id_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   container_id_proto__free_unpacked
                     (ContainerIdProto *message,
                      ProtobufCAllocator *allocator);
/* ResourceProto methods */
void   resource_proto__init
                     (ResourceProto         *message);
size_t resource_proto__get_packed_size
                     (const ResourceProto   *message);
size_t resource_proto__pack
                     (const ResourceProto   *message,
                      uint8_t             *out);
size_t resource_proto__pack_to_buffer
                     (const ResourceProto   *message,
                      ProtobufCBuffer     *buffer);
ResourceProto *
       resource_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resource_proto__free_unpacked
                     (ResourceProto *message,
                      ProtobufCAllocator *allocator);
/* PriorityProto methods */
void   priority_proto__init
                     (PriorityProto         *message);
size_t priority_proto__get_packed_size
                     (const PriorityProto   *message);
size_t priority_proto__pack
                     (const PriorityProto   *message,
                      uint8_t             *out);
size_t priority_proto__pack_to_buffer
                     (const PriorityProto   *message,
                      ProtobufCBuffer     *buffer);
PriorityProto *
       priority_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   priority_proto__free_unpacked
                     (PriorityProto *message,
                      ProtobufCAllocator *allocator);
/* ContainerProto methods */
void   container_proto__init
                     (ContainerProto         *message);
size_t container_proto__get_packed_size
                     (const ContainerProto   *message);
size_t container_proto__pack
                     (const ContainerProto   *message,
                      uint8_t             *out);
size_t container_proto__pack_to_buffer
                     (const ContainerProto   *message,
                      ProtobufCBuffer     *buffer);
ContainerProto *
       container_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   container_proto__free_unpacked
                     (ContainerProto *message,
                      ProtobufCAllocator *allocator);
/* URLProto methods */
void   urlproto__init
                     (URLProto         *message);
size_t urlproto__get_packed_size
                     (const URLProto   *message);
size_t urlproto__pack
                     (const URLProto   *message,
                      uint8_t             *out);
size_t urlproto__pack_to_buffer
                     (const URLProto   *message,
                      ProtobufCBuffer     *buffer);
URLProto *
       urlproto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   urlproto__free_unpacked
                     (URLProto *message,
                      ProtobufCAllocator *allocator);
/* LocalResourceProto methods */
void   local_resource_proto__init
                     (LocalResourceProto         *message);
size_t local_resource_proto__get_packed_size
                     (const LocalResourceProto   *message);
size_t local_resource_proto__pack
                     (const LocalResourceProto   *message,
                      uint8_t             *out);
size_t local_resource_proto__pack_to_buffer
                     (const LocalResourceProto   *message,
                      ProtobufCBuffer     *buffer);
LocalResourceProto *
       local_resource_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   local_resource_proto__free_unpacked
                     (LocalResourceProto *message,
                      ProtobufCAllocator *allocator);
/* ApplicationResourceUsageReportProto methods */
void   application_resource_usage_report_proto__init
                     (ApplicationResourceUsageReportProto         *message);
size_t application_resource_usage_report_proto__get_packed_size
                     (const ApplicationResourceUsageReportProto   *message);
size_t application_resource_usage_report_proto__pack
                     (const ApplicationResourceUsageReportProto   *message,
                      uint8_t             *out);
size_t application_resource_usage_report_proto__pack_to_buffer
                     (const ApplicationResourceUsageReportProto   *message,
                      ProtobufCBuffer     *buffer);
ApplicationResourceUsageReportProto *
       application_resource_usage_report_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   application_resource_usage_report_proto__free_unpacked
                     (ApplicationResourceUsageReportProto *message,
                      ProtobufCAllocator *allocator);
/* ApplicationReportProto methods */
void   application_report_proto__init
                     (ApplicationReportProto         *message);
size_t application_report_proto__get_packed_size
                     (const ApplicationReportProto   *message);
size_t application_report_proto__pack
                     (const ApplicationReportProto   *message,
                      uint8_t             *out);
size_t application_report_proto__pack_to_buffer
                     (const ApplicationReportProto   *message,
                      ProtobufCBuffer     *buffer);
ApplicationReportProto *
       application_report_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   application_report_proto__free_unpacked
                     (ApplicationReportProto *message,
                      ProtobufCAllocator *allocator);
/* NodeIdProto methods */
void   node_id_proto__init
                     (NodeIdProto         *message);
size_t node_id_proto__get_packed_size
                     (const NodeIdProto   *message);
size_t node_id_proto__pack
                     (const NodeIdProto   *message,
                      uint8_t             *out);
size_t node_id_proto__pack_to_buffer
                     (const NodeIdProto   *message,
                      ProtobufCBuffer     *buffer);
NodeIdProto *
       node_id_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node_id_proto__free_unpacked
                     (NodeIdProto *message,
                      ProtobufCAllocator *allocator);
/* NodeReportProto methods */
void   node_report_proto__init
                     (NodeReportProto         *message);
size_t node_report_proto__get_packed_size
                     (const NodeReportProto   *message);
size_t node_report_proto__pack
                     (const NodeReportProto   *message,
                      uint8_t             *out);
size_t node_report_proto__pack_to_buffer
                     (const NodeReportProto   *message,
                      ProtobufCBuffer     *buffer);
NodeReportProto *
       node_report_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node_report_proto__free_unpacked
                     (NodeReportProto *message,
                      ProtobufCAllocator *allocator);
/* ResourceRequestProto methods */
void   resource_request_proto__init
                     (ResourceRequestProto         *message);
size_t resource_request_proto__get_packed_size
                     (const ResourceRequestProto   *message);
size_t resource_request_proto__pack
                     (const ResourceRequestProto   *message,
                      uint8_t             *out);
size_t resource_request_proto__pack_to_buffer
                     (const ResourceRequestProto   *message,
                      ProtobufCBuffer     *buffer);
ResourceRequestProto *
       resource_request_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resource_request_proto__free_unpacked
                     (ResourceRequestProto *message,
                      ProtobufCAllocator *allocator);
/* PreemptionMessageProto methods */
void   preemption_message_proto__init
                     (PreemptionMessageProto         *message);
size_t preemption_message_proto__get_packed_size
                     (const PreemptionMessageProto   *message);
size_t preemption_message_proto__pack
                     (const PreemptionMessageProto   *message,
                      uint8_t             *out);
size_t preemption_message_proto__pack_to_buffer
                     (const PreemptionMessageProto   *message,
                      ProtobufCBuffer     *buffer);
PreemptionMessageProto *
       preemption_message_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   preemption_message_proto__free_unpacked
                     (PreemptionMessageProto *message,
                      ProtobufCAllocator *allocator);
/* StrictPreemptionContractProto methods */
void   strict_preemption_contract_proto__init
                     (StrictPreemptionContractProto         *message);
size_t strict_preemption_contract_proto__get_packed_size
                     (const StrictPreemptionContractProto   *message);
size_t strict_preemption_contract_proto__pack
                     (const StrictPreemptionContractProto   *message,
                      uint8_t             *out);
size_t strict_preemption_contract_proto__pack_to_buffer
                     (const StrictPreemptionContractProto   *message,
                      ProtobufCBuffer     *buffer);
StrictPreemptionContractProto *
       strict_preemption_contract_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   strict_preemption_contract_proto__free_unpacked
                     (StrictPreemptionContractProto *message,
                      ProtobufCAllocator *allocator);
/* PreemptionContractProto methods */
void   preemption_contract_proto__init
                     (PreemptionContractProto         *message);
size_t preemption_contract_proto__get_packed_size
                     (const PreemptionContractProto   *message);
size_t preemption_contract_proto__pack
                     (const PreemptionContractProto   *message,
                      uint8_t             *out);
size_t preemption_contract_proto__pack_to_buffer
                     (const PreemptionContractProto   *message,
                      ProtobufCBuffer     *buffer);
PreemptionContractProto *
       preemption_contract_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   preemption_contract_proto__free_unpacked
                     (PreemptionContractProto *message,
                      ProtobufCAllocator *allocator);
/* PreemptionContainerProto methods */
void   preemption_container_proto__init
                     (PreemptionContainerProto         *message);
size_t preemption_container_proto__get_packed_size
                     (const PreemptionContainerProto   *message);
size_t preemption_container_proto__pack
                     (const PreemptionContainerProto   *message,
                      uint8_t             *out);
size_t preemption_container_proto__pack_to_buffer
                     (const PreemptionContainerProto   *message,
                      ProtobufCBuffer     *buffer);
PreemptionContainerProto *
       preemption_container_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   preemption_container_proto__free_unpacked
                     (PreemptionContainerProto *message,
                      ProtobufCAllocator *allocator);
/* PreemptionResourceRequestProto methods */
void   preemption_resource_request_proto__init
                     (PreemptionResourceRequestProto         *message);
size_t preemption_resource_request_proto__get_packed_size
                     (const PreemptionResourceRequestProto   *message);
size_t preemption_resource_request_proto__pack
                     (const PreemptionResourceRequestProto   *message,
                      uint8_t             *out);
size_t preemption_resource_request_proto__pack_to_buffer
                     (const PreemptionResourceRequestProto   *message,
                      ProtobufCBuffer     *buffer);
PreemptionResourceRequestProto *
       preemption_resource_request_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   preemption_resource_request_proto__free_unpacked
                     (PreemptionResourceRequestProto *message,
                      ProtobufCAllocator *allocator);
/* ResourceBlacklistRequestProto methods */
void   resource_blacklist_request_proto__init
                     (ResourceBlacklistRequestProto         *message);
size_t resource_blacklist_request_proto__get_packed_size
                     (const ResourceBlacklistRequestProto   *message);
size_t resource_blacklist_request_proto__pack
                     (const ResourceBlacklistRequestProto   *message,
                      uint8_t             *out);
size_t resource_blacklist_request_proto__pack_to_buffer
                     (const ResourceBlacklistRequestProto   *message,
                      ProtobufCBuffer     *buffer);
ResourceBlacklistRequestProto *
       resource_blacklist_request_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resource_blacklist_request_proto__free_unpacked
                     (ResourceBlacklistRequestProto *message,
                      ProtobufCAllocator *allocator);
/* ApplicationSubmissionContextProto methods */
void   application_submission_context_proto__init
                     (ApplicationSubmissionContextProto         *message);
size_t application_submission_context_proto__get_packed_size
                     (const ApplicationSubmissionContextProto   *message);
size_t application_submission_context_proto__pack
                     (const ApplicationSubmissionContextProto   *message,
                      uint8_t             *out);
size_t application_submission_context_proto__pack_to_buffer
                     (const ApplicationSubmissionContextProto   *message,
                      ProtobufCBuffer     *buffer);
ApplicationSubmissionContextProto *
       application_submission_context_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   application_submission_context_proto__free_unpacked
                     (ApplicationSubmissionContextProto *message,
                      ProtobufCAllocator *allocator);
/* ApplicationACLMapProto methods */
void   application_aclmap_proto__init
                     (ApplicationACLMapProto         *message);
size_t application_aclmap_proto__get_packed_size
                     (const ApplicationACLMapProto   *message);
size_t application_aclmap_proto__pack
                     (const ApplicationACLMapProto   *message,
                      uint8_t             *out);
size_t application_aclmap_proto__pack_to_buffer
                     (const ApplicationACLMapProto   *message,
                      ProtobufCBuffer     *buffer);
ApplicationACLMapProto *
       application_aclmap_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   application_aclmap_proto__free_unpacked
                     (ApplicationACLMapProto *message,
                      ProtobufCAllocator *allocator);
/* YarnClusterMetricsProto methods */
void   yarn_cluster_metrics_proto__init
                     (YarnClusterMetricsProto         *message);
size_t yarn_cluster_metrics_proto__get_packed_size
                     (const YarnClusterMetricsProto   *message);
size_t yarn_cluster_metrics_proto__pack
                     (const YarnClusterMetricsProto   *message,
                      uint8_t             *out);
size_t yarn_cluster_metrics_proto__pack_to_buffer
                     (const YarnClusterMetricsProto   *message,
                      ProtobufCBuffer     *buffer);
YarnClusterMetricsProto *
       yarn_cluster_metrics_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   yarn_cluster_metrics_proto__free_unpacked
                     (YarnClusterMetricsProto *message,
                      ProtobufCAllocator *allocator);
/* QueueInfoProto methods */
void   queue_info_proto__init
                     (QueueInfoProto         *message);
size_t queue_info_proto__get_packed_size
                     (const QueueInfoProto   *message);
size_t queue_info_proto__pack
                     (const QueueInfoProto   *message,
                      uint8_t             *out);
size_t queue_info_proto__pack_to_buffer
                     (const QueueInfoProto   *message,
                      ProtobufCBuffer     *buffer);
QueueInfoProto *
       queue_info_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   queue_info_proto__free_unpacked
                     (QueueInfoProto *message,
                      ProtobufCAllocator *allocator);
/* QueueUserACLInfoProto methods */
void   queue_user_aclinfo_proto__init
                     (QueueUserACLInfoProto         *message);
size_t queue_user_aclinfo_proto__get_packed_size
                     (const QueueUserACLInfoProto   *message);
size_t queue_user_aclinfo_proto__pack
                     (const QueueUserACLInfoProto   *message,
                      uint8_t             *out);
size_t queue_user_aclinfo_proto__pack_to_buffer
                     (const QueueUserACLInfoProto   *message,
                      ProtobufCBuffer     *buffer);
QueueUserACLInfoProto *
       queue_user_aclinfo_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   queue_user_aclinfo_proto__free_unpacked
                     (QueueUserACLInfoProto *message,
                      ProtobufCAllocator *allocator);
/* ContainerLaunchContextProto methods */
void   container_launch_context_proto__init
                     (ContainerLaunchContextProto         *message);
size_t container_launch_context_proto__get_packed_size
                     (const ContainerLaunchContextProto   *message);
size_t container_launch_context_proto__pack
                     (const ContainerLaunchContextProto   *message,
                      uint8_t             *out);
size_t container_launch_context_proto__pack_to_buffer
                     (const ContainerLaunchContextProto   *message,
                      ProtobufCBuffer     *buffer);
ContainerLaunchContextProto *
       container_launch_context_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   container_launch_context_proto__free_unpacked
                     (ContainerLaunchContextProto *message,
                      ProtobufCAllocator *allocator);
/* ContainerStatusProto methods */
void   container_status_proto__init
                     (ContainerStatusProto         *message);
size_t container_status_proto__get_packed_size
                     (const ContainerStatusProto   *message);
size_t container_status_proto__pack
                     (const ContainerStatusProto   *message,
                      uint8_t             *out);
size_t container_status_proto__pack_to_buffer
                     (const ContainerStatusProto   *message,
                      ProtobufCBuffer     *buffer);
ContainerStatusProto *
       container_status_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   container_status_proto__free_unpacked
                     (ContainerStatusProto *message,
                      ProtobufCAllocator *allocator);
/* StringLocalResourceMapProto methods */
void   string_local_resource_map_proto__init
                     (StringLocalResourceMapProto         *message);
size_t string_local_resource_map_proto__get_packed_size
                     (const StringLocalResourceMapProto   *message);
size_t string_local_resource_map_proto__pack
                     (const StringLocalResourceMapProto   *message,
                      uint8_t             *out);
size_t string_local_resource_map_proto__pack_to_buffer
                     (const StringLocalResourceMapProto   *message,
                      ProtobufCBuffer     *buffer);
StringLocalResourceMapProto *
       string_local_resource_map_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   string_local_resource_map_proto__free_unpacked
                     (StringLocalResourceMapProto *message,
                      ProtobufCAllocator *allocator);
/* StringStringMapProto methods */
void   string_string_map_proto__init
                     (StringStringMapProto         *message);
size_t string_string_map_proto__get_packed_size
                     (const StringStringMapProto   *message);
size_t string_string_map_proto__pack
                     (const StringStringMapProto   *message,
                      uint8_t             *out);
size_t string_string_map_proto__pack_to_buffer
                     (const StringStringMapProto   *message,
                      ProtobufCBuffer     *buffer);
StringStringMapProto *
       string_string_map_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   string_string_map_proto__free_unpacked
                     (StringStringMapProto *message,
                      ProtobufCAllocator *allocator);
/* StringBytesMapProto methods */
void   string_bytes_map_proto__init
                     (StringBytesMapProto         *message);
size_t string_bytes_map_proto__get_packed_size
                     (const StringBytesMapProto   *message);
size_t string_bytes_map_proto__pack
                     (const StringBytesMapProto   *message,
                      uint8_t             *out);
size_t string_bytes_map_proto__pack_to_buffer
                     (const StringBytesMapProto   *message,
                      ProtobufCBuffer     *buffer);
StringBytesMapProto *
       string_bytes_map_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   string_bytes_map_proto__free_unpacked
                     (StringBytesMapProto *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SerializedExceptionProto_Closure)
                 (const SerializedExceptionProto *message,
                  void *closure_data);
typedef void (*ApplicationIdProto_Closure)
                 (const ApplicationIdProto *message,
                  void *closure_data);
typedef void (*ApplicationAttemptIdProto_Closure)
                 (const ApplicationAttemptIdProto *message,
                  void *closure_data);
typedef void (*ContainerIdProto_Closure)
                 (const ContainerIdProto *message,
                  void *closure_data);
typedef void (*ResourceProto_Closure)
                 (const ResourceProto *message,
                  void *closure_data);
typedef void (*PriorityProto_Closure)
                 (const PriorityProto *message,
                  void *closure_data);
typedef void (*ContainerProto_Closure)
                 (const ContainerProto *message,
                  void *closure_data);
typedef void (*URLProto_Closure)
                 (const URLProto *message,
                  void *closure_data);
typedef void (*LocalResourceProto_Closure)
                 (const LocalResourceProto *message,
                  void *closure_data);
typedef void (*ApplicationResourceUsageReportProto_Closure)
                 (const ApplicationResourceUsageReportProto *message,
                  void *closure_data);
typedef void (*ApplicationReportProto_Closure)
                 (const ApplicationReportProto *message,
                  void *closure_data);
typedef void (*NodeIdProto_Closure)
                 (const NodeIdProto *message,
                  void *closure_data);
typedef void (*NodeReportProto_Closure)
                 (const NodeReportProto *message,
                  void *closure_data);
typedef void (*ResourceRequestProto_Closure)
                 (const ResourceRequestProto *message,
                  void *closure_data);
typedef void (*PreemptionMessageProto_Closure)
                 (const PreemptionMessageProto *message,
                  void *closure_data);
typedef void (*StrictPreemptionContractProto_Closure)
                 (const StrictPreemptionContractProto *message,
                  void *closure_data);
typedef void (*PreemptionContractProto_Closure)
                 (const PreemptionContractProto *message,
                  void *closure_data);
typedef void (*PreemptionContainerProto_Closure)
                 (const PreemptionContainerProto *message,
                  void *closure_data);
typedef void (*PreemptionResourceRequestProto_Closure)
                 (const PreemptionResourceRequestProto *message,
                  void *closure_data);
typedef void (*ResourceBlacklistRequestProto_Closure)
                 (const ResourceBlacklistRequestProto *message,
                  void *closure_data);
typedef void (*ApplicationSubmissionContextProto_Closure)
                 (const ApplicationSubmissionContextProto *message,
                  void *closure_data);
typedef void (*ApplicationACLMapProto_Closure)
                 (const ApplicationACLMapProto *message,
                  void *closure_data);
typedef void (*YarnClusterMetricsProto_Closure)
                 (const YarnClusterMetricsProto *message,
                  void *closure_data);
typedef void (*QueueInfoProto_Closure)
                 (const QueueInfoProto *message,
                  void *closure_data);
typedef void (*QueueUserACLInfoProto_Closure)
                 (const QueueUserACLInfoProto *message,
                  void *closure_data);
typedef void (*ContainerLaunchContextProto_Closure)
                 (const ContainerLaunchContextProto *message,
                  void *closure_data);
typedef void (*ContainerStatusProto_Closure)
                 (const ContainerStatusProto *message,
                  void *closure_data);
typedef void (*StringLocalResourceMapProto_Closure)
                 (const StringLocalResourceMapProto *message,
                  void *closure_data);
typedef void (*StringStringMapProto_Closure)
                 (const StringStringMapProto *message,
                  void *closure_data);
typedef void (*StringBytesMapProto_Closure)
                 (const StringBytesMapProto *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    container_state_proto__descriptor;
extern const ProtobufCEnumDescriptor    yarn_application_state_proto__descriptor;
extern const ProtobufCEnumDescriptor    final_application_status_proto__descriptor;
extern const ProtobufCEnumDescriptor    local_resource_visibility_proto__descriptor;
extern const ProtobufCEnumDescriptor    local_resource_type_proto__descriptor;
extern const ProtobufCEnumDescriptor    node_state_proto__descriptor;
extern const ProtobufCEnumDescriptor    amcommand_proto__descriptor;
extern const ProtobufCEnumDescriptor    application_access_type_proto__descriptor;
extern const ProtobufCEnumDescriptor    queue_state_proto__descriptor;
extern const ProtobufCEnumDescriptor    queue_aclproto__descriptor;
extern const ProtobufCEnumDescriptor    container_exit_status_proto__descriptor;
extern const ProtobufCMessageDescriptor serialized_exception_proto__descriptor;
extern const ProtobufCMessageDescriptor application_id_proto__descriptor;
extern const ProtobufCMessageDescriptor application_attempt_id_proto__descriptor;
extern const ProtobufCMessageDescriptor container_id_proto__descriptor;
extern const ProtobufCMessageDescriptor resource_proto__descriptor;
extern const ProtobufCMessageDescriptor priority_proto__descriptor;
extern const ProtobufCMessageDescriptor container_proto__descriptor;
extern const ProtobufCMessageDescriptor urlproto__descriptor;
extern const ProtobufCMessageDescriptor local_resource_proto__descriptor;
extern const ProtobufCMessageDescriptor application_resource_usage_report_proto__descriptor;
extern const ProtobufCMessageDescriptor application_report_proto__descriptor;
extern const ProtobufCMessageDescriptor node_id_proto__descriptor;
extern const ProtobufCMessageDescriptor node_report_proto__descriptor;
extern const ProtobufCMessageDescriptor resource_request_proto__descriptor;
extern const ProtobufCMessageDescriptor preemption_message_proto__descriptor;
extern const ProtobufCMessageDescriptor strict_preemption_contract_proto__descriptor;
extern const ProtobufCMessageDescriptor preemption_contract_proto__descriptor;
extern const ProtobufCMessageDescriptor preemption_container_proto__descriptor;
extern const ProtobufCMessageDescriptor preemption_resource_request_proto__descriptor;
extern const ProtobufCMessageDescriptor resource_blacklist_request_proto__descriptor;
extern const ProtobufCMessageDescriptor application_submission_context_proto__descriptor;
extern const ProtobufCMessageDescriptor application_aclmap_proto__descriptor;
extern const ProtobufCMessageDescriptor yarn_cluster_metrics_proto__descriptor;
extern const ProtobufCMessageDescriptor queue_info_proto__descriptor;
extern const ProtobufCMessageDescriptor queue_user_aclinfo_proto__descriptor;
extern const ProtobufCMessageDescriptor container_launch_context_proto__descriptor;
extern const ProtobufCMessageDescriptor container_status_proto__descriptor;
extern const ProtobufCMessageDescriptor string_local_resource_map_proto__descriptor;
extern const ProtobufCMessageDescriptor string_string_map_proto__descriptor;
extern const ProtobufCMessageDescriptor string_bytes_map_proto__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_yarn_5fprotos_2eproto__INCLUDED */
